{"version":3,"sources":["../../src/core/gmind.ts","../../src/mock/baseData.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["Gmind","constructor","cfg","console","G6","TreeGraph","id","children","Designer","designerRef","useRef","useEffect","graph","container","width","height","modes","default","defaultNode","size","anchorPoints","style","fill","stroke","defaultEdge","type","layout","direction","getId","d","getHeight","getWidth","getVGap","getHGap","x","y","className","styles","ref","App","ReactDOM","render","document","getElementById"],"mappings":"0VAGqBA,E,kDAEnBC,WAAYC,0CACV,G,sDAIAC,+B,UAP+BC,EAAGC,WCDtC,EAAe,CACbC,GADa,2BAEbC,SAAU,CACR,CACED,GADF,iBAEEC,SAAU,CACR,CAAED,GAAI,uBACN,CAAEA,GAAI,gCACN,CAAEA,GAAI,SACN,CAAEA,GAAI,kBACN,CAAEA,GAAI,eACN,CAAEA,GAAI,sBACN,CAAEA,GAAI,gCACN,CAAEA,GAAI,4BAGV,CACEA,GADF,YAEEC,SAAU,CACR,CACED,GADF,mBAEEC,SAAU,CACR,CAAED,GAAI,6BACN,CAAEA,GAAI,+BACN,CAAEA,GAAI,2BACN,CAAEA,GAAI,8BACN,CAAEA,GAAI,2BACN,CAAEA,GAAI,4BAGV,CACEA,GADF,UAEEC,SAAU,CACR,CAAED,GAAI,wBACN,CAAEA,GAAI,uBAGV,CACEA,GADF,SAEEC,SAAU,CAAC,CAAED,GAAI,WAAa,CAAEA,GAAI,YAAc,CAAEA,GAAI,gBAI9D,CACEA,GADF,aAEEC,SAAU,CACR,CAAED,GAAI,8BACN,CAAEA,GAAI,yBACN,CAAEA,GAAI,0CACN,CAAEA,GAAI,qCACN,CAAEA,GAAI,iCC3CDE,EAAW,WACtB,IAAMC,EAAcC,iBAApB,MAyDA,OAtDAC,qBAAU,WACR,IAAMC,EAAQ,IAAI,EAAM,CACtBC,UADsB,iBAEtBC,MAFsB,KAGtBC,OAHsB,IAItBC,MAAO,CACLC,QAAS,CAAC,cAAe,gBAE3BC,YAAa,CACXC,KADW,GAEXC,aAAc,CACZ,CAAC,EADW,IAEZ,CAAC,EAJQ,KAMXC,MAAO,CACLC,KADK,UAELC,OAAQ,YAGZC,YAAa,CACXC,KADW,mBAEXJ,MAAO,CACLE,OAAQ,YAGZG,OAAQ,CACND,KADM,aAENE,UAFM,KAGNC,MAAO,SAAeC,GACpB,OAAOA,EAAP,IAEFC,UAAW,WACT,WAEFC,SAAU,WACR,WAEFC,QAAS,WACP,WAEFC,QAAS,WACP,eAKNrB,UACAA,WACAA,YACAA,WAAgB,CACdsB,EAAG,IACHC,EAAG,QAnDPxB,IAuDE,yBACEyB,UAAWC,EACX/B,GAAG,iBACHgC,IAAK7B,KCzDI8B,G,MARH,WACV,OACE,yBAAKH,UAAU,aACb,kBAAC,EAAD,SCHNI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8bc2433a.chunk.js","sourcesContent":["import G6 from '@antv/g6'\nimport { GraphOptions } from '@antv/g6/lib/interface/graph'\n\nexport default class Gmind extends G6.TreeGraph {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(cfg: GraphOptions) {\n    super(cfg)\n  }\n\n  getData() {\n    console.log('hello world')\n  }\n}\n","\n\nexport default {\n  id: '分析图谱',\n  children: [\n    {\n      id: 'Classification',\n      children: [\n        { id: 'Logistic regression' },\n        { id: 'Linear discriminant analysis' },\n        { id: 'Rules' },\n        { id: 'Decision trees' },\n        { id: 'Naive Bayes' },\n        { id: 'K nearest neighbor' },\n        { id: 'Probabilistic neural network' },\n        { id: 'Support vector machine' }\n      ]\n    },\n    {\n      id: 'Consensus',\n      children: [\n        {\n          id: 'Models diversity',\n          children: [\n            { id: 'Different initializations' },\n            { id: 'Different parameter choices' },\n            { id: 'Different architectures' },\n            { id: 'Different modeling methods' },\n            { id: 'Different training sets' },\n            { id: 'Different feature sets' }\n          ]\n        },\n        {\n          id: 'Methods',\n          children: [\n            { id: 'Classifier selection' },\n            { id: 'Classifier fusion' }\n          ]\n        },\n        {\n          id: 'Common',\n          children: [{ id: 'Bagging' }, { id: 'Boosting' }, { id: 'AdaBoost' }]\n        }\n      ]\n    },\n    {\n      id: 'Regression',\n      children: [\n        { id: 'Multiple linear regression' },\n        { id: 'Partial least squares' },\n        { id: 'Multi-layer feedforward neural network' },\n        { id: 'General regression neural network' },\n        { id: 'Support vector regression' }\n      ]\n    }\n  ]\n}\n","import React, { useEffect, useRef } from 'react'\nimport styles from './styles.module.css'\nimport Gmind from './core/gmind'\nimport baseData from './mock/baseData'\n\n// interface Props {\n//  text: string\n// }\n\nexport const Designer = () => {\n  const designerRef = useRef(null)\n  // const designerDom = designerRef.current\n\n  useEffect(() => {\n    const graph = new Gmind({\n      container: 'gmind-designer',\n      width: 1600,\n      height: 700,\n      modes: {\n        default: ['drag-canvas', 'zoom-canvas']\n      },\n      defaultNode: {\n        size: 26,\n        anchorPoints: [\n          [0, 0.5],\n          [1, 0.5]\n        ],\n        style: {\n          fill: '#C6E5FF',\n          stroke: '#5B8FF9'\n        }\n      },\n      defaultEdge: {\n        type: 'cubic-horizontal',\n        style: {\n          stroke: '#A3B1BF'\n        }\n      },\n      layout: {\n        type: 'compactBox',\n        direction: 'LR',\n        getId: function getId(d: any) {\n          return d.id\n        },\n        getHeight: function getHeight() {\n          return 16\n        },\n        getWidth: function getWidth() {\n          return 16\n        },\n        getVGap: function getVGap() {\n          return 10\n        },\n        getHGap: function getHGap() {\n          return 100\n        }\n      }\n    })\n\n    graph.data(baseData)\n    graph.render()\n    graph.fitView();\n    graph.zoomTo(1, {\n      x: 1600 / 2,\n      y: 700 / 2\n    })\n  }, [])\n  return (\n    <div\n      className={styles['gmind-designer']}\n      id='gmind-designer'\n      ref={designerRef}\n    />\n  )\n}\n","import React from 'react'\nimport './App.css'\n\nimport { Designer } from 'gmind'\nimport 'gmind/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Designer />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}