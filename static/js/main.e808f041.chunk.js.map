{"version":3,"sources":["../../src/core/gmind.ts","../../src/mock/baseData.ts","../../src/shape/node.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["Gmind","constructor","cfg","console","G6","TreeGraph","id","uuidv4","name","children","options","style","stateStyles","hover","selected","draw","nodeType","keyShape","group","attrs","x","y","radius","lineWidth","fontSize","opacity","isNodeShape","cursor","stroke","width","height","textAlign","textBaseline","text","textColor","fill","getAnchorPoints","Designer","designerRef","useRef","useEffect","graph","container","modes","default","defaultNode","type","defaultEdge","layout","direction","getId","d","getHeight","getWidth","getVGap","getHGap","className","styles","ref","App","ReactDOM","render","document","getElementById"],"mappings":"2WAGqBA,E,kDAEnBC,WAAYC,0CACV,G,sDAIAC,+B,GAP+BC,IAAGC,WCDtC,EAAe,CACbC,GAAIC,cACJC,KAFa,2BAGbC,SAAU,CACR,CACEH,GAAIC,cACJC,KAFF,2BAGEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAFF,qBAGEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,0CAIZ,CACEF,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,sBAER,CACEF,GAAIC,cACJC,KAAM,sBAER,CACEF,GAAIC,cACJC,KAAM,8BAIZ,CACEF,GAAIC,cACJC,KAFF,2BAGEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,4BAER,CACEF,GAAIC,cACJC,KAAM,gCC1DhBJ,6BAEE,CACEM,QAAS,CACPC,MADO,GAEPC,YAAa,CACXC,MADW,GAEXC,SAAU,KAGdC,KARF,SAQM,SAEI,EAAN,EAAM,KAAQC,EAAd,EAAcA,SACdb,iBAGA,IAAMc,EAAWC,EAAA,gBAAuB,CACtCC,MAAO,CACLC,EADK,EAELC,EAFK,EAGLC,OAHK,EAILC,UAJK,EAKLC,SALK,GAMLC,QANK,EAOLC,aAPK,EAQLC,OARK,UASLC,OATK,UAULC,MAVK,IAWLC,OAAQ,MAoBZ,OAfAZ,kBAAuB,CACrBC,MAAO,CACLY,UADK,SAELC,aAFK,SAGLZ,EAHK,GAILC,EAJK,GAKLY,KALK,EAMLT,SANK,GAOLG,OAPK,UAQLD,aARK,EASLQ,UATK,OAULC,KAAM,UAIV,GAEFC,gBAAiB,WACf,MAAO,CACL,CAAC,EADI,IAEL,CAAC,EAFH,OAnDNhC,e,ICSaiC,EAAW,WACtB,IAAMC,EAAcC,iBAApB,MAiDA,OA9CAC,qBAAU,WACR,IAAMC,EAAQ,IAAI,EAAM,CACtBC,UADsB,iBAEtBb,MAFsB,KAGtBC,OAHsB,IAItBa,MAAO,CACLC,QAAS,CAAC,cAAe,gBAE3BC,YAAa,CACXC,KAAM,aAERC,YAAa,CACXD,KADW,mBAEXnC,MAAO,CACLiB,OAAQ,YAGZoB,OAAQ,CACNF,KADM,aAENG,UAFM,KAGNC,MAAO,SAAeC,GACpB,OAAOA,EAAP,IAEFC,UAAW,WACT,WAEFC,SAAU,WACR,WAEFC,QAAS,WACP,WAEFC,QAAS,WACP,eAKNd,UACAA,WACAA,YACAA,WAAgB,CACdrB,EAAG,IACHC,EAAG,QA3CPmB,IA+CE,yBACEgB,UAAWC,EACXnD,GAAG,iBACHoD,IAAKpB,KCnDIqB,G,MARH,WACV,OACE,yBAAKH,UAAU,aACb,kBAAC,EAAD,SCHNI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e808f041.chunk.js","sourcesContent":["import G6 from '@antv/g6'\nimport { GraphOptions } from '@antv/g6/lib/interface/graph'\n\nexport default class Gmind extends G6.TreeGraph {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(cfg: GraphOptions) {\n    super(cfg)\n  }\n\n  getData() {\n    console.log('hello world')\n  }\n}\n","import { v4 as uuidv4 } from 'uuid'\n\nexport default {\n  id: uuidv4(),\n  name: '分析图谱',\n  children: [\n    {\n      id: uuidv4(),\n      name: '行业管理',\n      children: [\n        {\n          id: uuidv4(),\n          name: '金融业',\n          children: [\n            {\n              id: uuidv4(),\n              name: '资本市场服务'\n            },\n            {\n              id: uuidv4(),\n              name: '货币金融服务'\n            },\n            {\n              id: uuidv4(),\n              name: '资本市场服务'\n            }\n          ]\n        },\n        {\n          id: uuidv4(),\n          name: '批发和零售业'\n        },\n        {\n          id: uuidv4(),\n          name: '制造业'\n        },\n        {\n          id: uuidv4(),\n          name: '建筑业'\n        },\n        {\n          id: uuidv4(),\n          name: '房地产业'\n        }\n      ]\n    },\n    {\n      id: uuidv4(),\n      name: '事项管理',\n      children: [\n        {\n          id: uuidv4(),\n          name: '生产经营事项'\n        },\n        {\n          id: uuidv4(),\n          name: '跨境事项'\n        },\n        {\n          id: uuidv4(),\n          name: '投资事项'\n        }\n      ]\n    }\n  ]\n}\n","import G6 from '@antv/g6'\n\nG6.registerNode(\n  'base-node',\n  {\n    options: {\n      style: {},\n      stateStyles: {\n        hover: {},\n        selected: {}\n      }\n    },\n    draw(cfg, group) {\n      // @ts-ignore\n      const { name, nodeType } = cfg\n      console.log(name, nodeType)\n\n      // @ts-ignore\n      const keyShape = group.addShape('rect', {\n        attrs: {\n          x: 0,\n          y: 0,\n          radius: 5,\n          lineWidth: 2,\n          fontSize: 12,\n          opacity: 1,\n          isNodeShape: true,\n          cursor: 'pointer',\n          stroke: '#fd6d5a',\n          width: 180,\n          height: 30\n        }\n      })\n\n      // @ts-ignore\n      group.addShape('text', {\n        attrs: {\n          textAlign: 'center',\n          textBaseline: 'bottom',\n          x: 90,\n          y: 22,\n          text: name,\n          fontSize: 14,\n          cursor: 'pointer',\n          isNodeShape: true,\n          textColor: '#000',\n          fill: '#000'\n        }\n      })\n\n      return keyShape\n    },\n    getAnchorPoints: function getAnchorPoints() {\n      return [\n        [0, 0.5],\n        [1, 0.5]\n      ]\n    }\n  },\n  'single-node'\n)\n","import React, { useEffect, useRef } from 'react'\nimport styles from './styles.module.css'\nimport Gmind from './core/gmind'\nimport baseData from './mock/baseData'\n\nimport './shape/node'\n\n// interface Props {\n//  text: string\n// }\n\nexport const Designer = () => {\n  const designerRef = useRef(null)\n  // const designerDom = designerRef.current\n\n  useEffect(() => {\n    const graph = new Gmind({\n      container: 'gmind-designer',\n      width: 1600,\n      height: 700,\n      modes: {\n        default: ['drag-canvas', 'zoom-canvas']\n      },\n      defaultNode: {\n        type: 'base-node'\n      },\n      defaultEdge: {\n        type: 'cubic-horizontal',\n        style: {\n          stroke: '#A3B1BF'\n        }\n      },\n      layout: {\n        type: 'compactBox',\n        direction: 'LR',\n        getId: function getId(d: any) {\n          return d.id\n        },\n        getHeight: function getHeight() {\n          return 40\n        },\n        getWidth: function getWidth() {\n          return 16\n        },\n        getVGap: function getVGap() {\n          return 10\n        },\n        getHGap: function getHGap() {\n          return 100\n        }\n      }\n    })\n\n    graph.data(baseData)\n    graph.render()\n    graph.fitView();\n    graph.zoomTo(1, {\n      x: 1600 / 2,\n      y: 700 / 2\n    })\n  }, [])\n  return (\n    <div\n      className={styles['gmind-designer']}\n      id='gmind-designer'\n      ref={designerRef}\n    />\n  )\n}\n","import React from 'react'\nimport './App.css'\n\nimport { Designer } from 'gmind'\nimport 'gmind/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Designer />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}