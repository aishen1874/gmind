{"version":3,"sources":["../../src/core/gmind.ts","../../src/mock/baseData.ts","../../src/util/mapTree.ts","../../src/util/getWrapString.ts","../../src/shape/node.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["Gmind","getData","console","G6","TreeGraph","id","uuidv4","name","children","mapTree","treeData","rest","target","mapCallback","Array","item","isCJKCharacter","ch","cjk","NO1Unihan","NO2UFF00","NO3U2E80","NO4U3000","NO5U31C0","NO6U2F00","NO7U2FF0","NO8U3100","NO9U31A0","NO10U3040","NO11U30A0","NO12U31F0","NO13UAC00","NO14U1100","NO15U3130","NO16U1D300","NO17U4DC0","NO18UA000","NO19UA490","NO20U2800","NO21U3200","NO22U3300","NO23U2700","NO24U2600","NO25UFE10","NO26UFE30","str","RegExp","reg","options","style","stateStyles","hover","selected","draw","nodeType","cfg","wrapString","lines","keyShape","group","attrs","x","y","radius","lineWidth","fontSize","opacity","isNodeShape","cursor","stroke","width","height","textAlign","textBaseline","text","textColor","fill","getAnchorPoints","Designer","designerRef","useRef","useEffect","graph","container","modes","default","defaultNode","type","size","defaultEdge","layout","direction","getHeight","d","getWidth","getVGap","getHGap","targetData","baseData","uuid","$div","document","styleObj","position","filter","rawText","isBreakWord","lineHeight","parseFloat","words","temp","i","oneline","word","string","getWrapString","className","styles","ref","App","ReactDOM","render","getElementById"],"mappings":"+fAGqBA,c,QAEnB,c,OACE,qB,0GAGFC,mBACEC,4B,EAPiBF,CAAcG,IAAGC,WCDtC,EAAe,CACbC,GAAIC,cACJC,KAFa,2BAGbC,SAAU,CACR,CACEH,GAAIC,cACJC,KAFF,2BAGEC,SAAU,CACR,CACEH,GADF,KAEEE,KAFF,ocAIEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAAM,mEAER,CACEF,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,0CAIZ,CACEF,GADF,KAEEE,KAFF,uUAIEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAAM,mFAER,CACEF,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,0CAIZ,CACEF,GAAIC,cACJC,KAAM,sBAER,CACEF,GAAIC,cACJC,KAAM,sBAER,CACEF,GAAIC,cACJC,KAAM,4BAER,CACEF,GADF,KAEEE,KACE,ucAIR,CACEF,GAAIC,cACJC,KAFF,2BAGEC,SAAU,CACR,CACEH,GAAIC,cACJC,KAAM,wCAER,CACEF,GAAIC,cACJC,KAAM,4BAER,CACEF,GAAIC,cACJC,KAAM,gCChFhB,SAASE,EAAQC,EAAjB,G,IACUF,EAAsBE,EAAtBF,SAAaG,E,oIAAAA,CAASD,gBAExBE,EAAM,KACPC,EADL,IAUA,OANIL,GAAYM,cAAZN,IAAuCA,SAA3C,IACEI,cACAJ,WAAiB,YACfI,gBAAqBH,EAAQM,EAA7BH,QAGJ,ECVF,SAASI,EAAeC,GA0CtB,IAAMC,EAAM,CACVC,UAAW,CAAC,kBAAD,6FADD,IAWVC,SAAU,CAXA,mBAYVC,SAAU,CAZA,mBAaVC,SAAU,CAbA,mBAcVC,SAAU,CAdA,mBAeVC,SAAU,CAfA,mBAgBVC,SAAU,CAhBA,kBAiBVC,SAAU,CAjBA,mBAkBVC,SAAU,CAlBA,mBAmBVC,UAAW,CAnBD,mBAoBVC,UAAW,CApBD,mBAqBVC,UAAW,CArBD,mBAsBVC,UAAW,CAtBD,mBAuBVC,UAAW,CAvBD,mBAwBVC,UAAW,CAxBD,mBAyBVC,WAAY,CAzBF,IA0BVC,UAAW,CA1BD,mBA2BVC,UAAW,CA3BD,mBA4BVC,UAAW,CA5BD,mBA6BVC,UAAW,CA7BD,mBA8BVC,UAAW,CA9BD,mBA+BVC,UAAW,CA/BD,mBAgCVC,UAAW,CAhCD,mBAiCVC,UAAW,CAjCD,mBAkCVC,UAAW,CAlCD,mBAmCVC,UAAW,CAAC,oBAGVC,EAAJ,IACA,IAAK,IAAL,OACEA,GAAO3B,UAAP2B,IAGF,eADAA,SAEQ,IAAIC,OAAOD,EAAjBE,KACOA,KAAP,GAEF,KCzFF5C,6BAEE,CACE6C,QAAS,CACPC,MADO,GAEPC,YAAa,CACXC,MADW,GAEXC,SAAU,KAGdC,KARF,c,IAUYC,EAAgCC,EAAhCD,SAAUE,EAAsBD,EAAtBC,WAAYC,EAAUF,EAAVE,MAE9BvD,eAGA,IAAMwD,EAAWC,EAAA,gBAAuB,CACtCC,MAAO,CACLC,EADK,EAELC,EAFK,EAGLC,OAHK,EAILC,UAJK,EAKLC,SALK,GAMLC,QANK,EAOLC,aAPK,EAQLC,OARK,UASLC,OATK,UAULC,MAVK,IAWLC,OAAQ,GAA0B,IAApBd,SAAD,MAoBjB,OAfAE,kBAAuB,CACrBC,MAAO,CACLY,UADK,OAELC,aAFK,MAGLZ,EAHK,EAILC,EAJK,EAKLY,KALK,EAMLT,SANK,GAOLG,OAPK,UAQLD,aARK,EASLQ,UATK,OAULC,KAAM,UAIV,GAEFC,gBAAiB,WACf,MAAO,CACL,CAAC,EADI,IAEL,CAAC,EAFH,OApDN1E,e,ICUa2E,EAAW,WACtB,IAAMC,EAAcC,iBAApB,MA6EA,OA1EAC,qBAAU,WACR,IAAMC,EAAQ,IAAIlF,EAAM,CACtBmF,UADsB,iBAEtBb,MAFsB,KAGtBC,OAHsB,IAItBa,MAAO,CACLC,QAAS,CAAC,cAAe,gBAE3BC,YAAa,CACXC,KADW,YAEXC,KAAM,CAAC,IAAK,MAEdC,YAAa,CACXF,KADW,mBAEXtC,MAAO,CACLoB,OAAQ,YAGZqB,OAAQ,CACNH,KADM,UAENI,UAFM,KAQNC,UAAW,SAAmBC,GAC5B,OAAIA,eAAJ,EACS,GAAP,IAAaA,eAAD,GAEd,IAGFC,SAAU,WAER,WAGFC,QAAS,WAEP,UAGFC,QAAS,WAEP,eAKAC,EAAaxF,EAAQyF,GAAU,SAAUnF,GAG7C,eAEEoF,KAAM7F,eFuBd,SAAuBuC,EAAvB,GAEE,IAAKA,GAAOA,UAAZ,EAA6B,MAAO,GAEpC,IAAMuD,EAAOC,uBAAb,OAEMC,EAAW,EAAH,CACZC,SADY,WAEZ,WAFY,EAGZrC,QAHY,EAIZsC,OAJY,mBAKZ,aAAc,oBALhB,GASA,IAAK,IAAL,OACEJ,WAAkBE,EAAlBF,GAGFC,wBAEAD,cAGA,IAAMK,EAAUL,EAAhB,UAEAA,eACAA,0BACAA,uBAUA,IARA,IAAMM,GACHN,iBAAsBA,QAAvB,6BADF,EAEMO,EAAaC,WAAWR,QAA9B,UAGMS,EAAN,GACMC,EAAOL,QAAb,MAESM,EAAT,EAAgBA,EAAID,EAApB,OAAiCC,IAE3B/F,EAAe8F,EAAf9F,KAAJ,EACE6F,eAAwBC,WAAxBD,KAGAA,OAAWC,EAAXD,IAQJ,IAHA,IAAMpD,EAAN,GACIuD,EAAJ,GAESD,EAAT,EAAgBA,EAAIF,EAApB,OAAkCE,IAAK,CACrC,IAAME,EAAOJ,EAAb,GACA,OAAII,GAYJb,YAAiBA,YAAjBA,EACIA,gBAAJ,EAGEY,WAIAvD,UAEA2C,eAEAY,KAEAD,OAvBAtD,aAEA2C,eAEAY,MAwBJvD,UAIA,IADA,IAAIyD,EAAJ,GACSH,EAAT,EAAgBA,EAAItD,EAApB,OAAkCsD,IAChCG,GAAUzD,cAAVyD,KAOF,OALAA,EAASA,cAAoBA,SAA7BA,GAEAd,WAGO,CACL5C,WADK,EAELC,MAFK,EAGLQ,SAAU0C,GE1HHQ,CAAcpG,EAAD,KAAY,CAC1B,YAD0B,OAE1BuD,MAF0B,QAG1B,YAAa,mBAKnBpE,eAEAgF,UACAA,WACAA,YACAA,WAAgB,CACdrB,EAAG,IACHC,EAAG,QAvEPmB,IA2EE,yBACEmC,UAAWC,EACXhH,GAAG,iBACHiH,IAAKvC,KChFIwC,G,MAVH,WACV,OACE,6BACE,yBAAKH,UAAU,aACb,kBAAC,EAAD,UCJRI,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,W","file":"static/js/main.da8c5f8b.chunk.js","sourcesContent":["import G6 from '@antv/g6'\nimport { GraphOptions } from '@antv/g6/lib/interface/graph'\n\nexport default class Gmind extends G6.TreeGraph {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(cfg: GraphOptions) {\n    super(cfg)\n  }\n\n  getData() {\n    console.log('hello world')\n  }\n}\n","import { v4 as uuidv4 } from 'uuid'\n\nexport default {\n  id: uuidv4(),\n  name: '分析图谱',\n  children: [\n    {\n      id: uuidv4(),\n      name: '行业管理',\n      children: [\n        {\n          id: '11',\n          name:\n            '这是一段超长的文本这是 一段超长 的文本 这是一段超长 ，的文本这是， 一段超长的文本这是一段超长的文本这是一段超长的文本这是一段超长的文本这是一段超长的文本',\n          children: [\n            {\n              id: uuidv4(),\n              name: '资本市场服务 abcdefghijklmnopqrstuvwxyz'\n            },\n            {\n              id: uuidv4(),\n              name: '货币金融服务'\n            },\n            {\n              id: uuidv4(),\n              name: '资本市场服务'\n            }\n          ]\n        },\n        {\n          id: '12',\n          name:\n            '批发和零售业批发和零售业批发和零售业批发和零售业批发和零售业批发和零售业批发和零售业批发和零售业批发和零售业',\n          children: [\n            {\n              id: uuidv4(),\n              name: '资本市场服务 abcdefghijklmnopqrstuvwxyzfajfjajfajfjajfj'\n            },\n            {\n              id: uuidv4(),\n              name: '货币金融服务'\n            },\n            {\n              id: uuidv4(),\n              name: '资本市场服务'\n            }\n          ]\n        },\n        {\n          id: uuidv4(),\n          name: '制造业'\n        },\n        {\n          id: uuidv4(),\n          name: '建筑业'\n        },\n        {\n          id: uuidv4(),\n          name: '房地产业'\n        },\n        {\n          id: '13',\n          name:\n            '这是一段超长的文本这是 一段超长 的文本 这是一段超长 ，的文本这是， 一段超长的文本这是一段超长的文本这是一段超长的文本这是一段超长的文本这是一段超长的文本'\n        }\n      ]\n    },\n    {\n      id: uuidv4(),\n      name: '事项管理',\n      children: [\n        {\n          id: uuidv4(),\n          name: '生产经营事项'\n        },\n        {\n          id: uuidv4(),\n          name: '跨境事项'\n        },\n        {\n          id: uuidv4(),\n          name: '投资事项'\n        }\n      ]\n    }\n  ]\n}\n","// 树形结构的 map 方法\nfunction mapTree(treeData: any, mapCallback: any) {\n  const { children, ...rest } = treeData\n\n  const target: any = {\n    ...mapCallback(rest)\n  }\n\n  if (children && Array.isArray(children) && children.length > 0) {\n    target.children = []\n    children.forEach((item) => {\n      target.children.push(mapTree(item, mapCallback))\n    })\n  }\n  return target\n}\n\nexport default mapTree\n","/*\n * 一个自动换行的方法，用于处理节点文本的换行\n * */\n\nfunction isCJKCharacter(ch: string) {\n  /*\n  参考网站：https://blog.csdn.net/iteye_4476/article/details/81652883，来源Unicode官网\n  CJK字符不同于其他字符，CJK字符可以在任意地方换行，不像英文字符等正常情况必须在单词后换行\n  截止20190725，根据我查到的资料（Unicode 5.0版），js中的Unicode为2个字节,CJK字符在2个字节的unicode中包括以下范围\n  //大多数情况下，可以取1.~5.来判断CJK字符\n  1.标准CJK文字\n    1.1 [\\u3400-\\u3db5] => CJK统一表意文字扩展A (发行版3.0)\n    1.2 [\\u4e00-\\u9fa5] => CJK统一表意文字 (发行版1.1) (常用来简单判断中文字符)\n    1.3 [\\u9fa6-\\u9fbb] => CJK统一表意文字 (发行版4.1)\n    1.4 [\\uf900-\\ufa2d] => CJK兼容文字 (发行版1.1)\n    1.5 [\\ufa30-\\ufa6a] => CJK兼容文字 (发行版3.2)\n    1.6 [\\ufa70-\\ufad9] => CJK兼容文字 (发行版4.1)\n    (以下两项编码超过两个字节，js中暂时不能用，但是还是写一下(js中无法使用的编码范围前面有双斜杠//标志)：\n    //1.7 [\\u20000-\\u2a6d6] => CJK统一表意文字扩展B (发行版3.1)\n    //1.8 [\\u2f800-\\u2fa1d] => CJK兼容补充 (发行版3.1))\n  2. [\\uff00-\\uffef] => 全角中英文标点符号、半宽片假名、半宽平假名、半宽韩文字母\n  3. [\\u2e80-\\u2eff] => CJK部首补充\n  4. [\\u3000-\\u303f] => CJK标点符号\n  5. [\\u31c0-\\u31ef] => CJK笔划\n  6. [\\u2f00-\\u2fdf] => 康熙部首\n  7. [\\u2ff0-\\u2fff] => 汉字结构描述字符\n  8. [\\u3100-\\u312f] => 注音符号\n  9. [\\u31a0-\\u31bf] => 注音符号(闽南语客家语扩展)\n  10. [\\u3040-\\u309f] => 日文平假名\n  11. [\\u30a0-\\u30ff] => 日文片假名\n  12. [\\u31f0-\\u31ff] => 日文片假名拼音扩展\n  13. [\\uac00-\\ud7af] => 韩文拼音\n  14. [\\u1100-\\u11ff] => 韩文字母\n  15. [\\u3130-\\u318f] => 韩文兼容字母\n  //16. [\\u1d300-\\u1d35f] => 太玄经符号\n  17. [\\u4dc0-\\u4dff] => 易经六十四卦象\n  18. [\\ua000-\\ua48f] => 彝文音节\n  19. [\\ua490-\\ua4cf] => 彝文部首\n  20. [\\u2800-\\u28ff] => 盲文符号\n  21. [\\u3200-\\u32ff] => CJK字母及月份\n  22. [\\u3300-\\u33ff] => CJK特殊符号(日期合并)\n  23. [\\u2700-\\u27bf] => 装饰符号(非CJK专用)\n  24. [\\u2600-\\u26ff] => 杂项符号(非CJK专用)\n  25. [\\ufe10-\\ufe1f] => 中文竖排标点\n  26. [\\ufe30-\\ufe4f] => CJK兼容符号(竖排变体、下划线、顿号)\n  */\n  const cjk = {\n    NO1Unihan: [\n      '\\\\u3400-\\\\u3db5',\n      '\\\\u4e00-\\\\u9fa5',\n      '\\\\u9fa6-\\\\u9fbb',\n      '\\\\uf900-\\\\ufa2d',\n      '\\\\ufa30-\\\\ufa6a',\n      '\\\\ufa70-\\\\ufad9',\n      '',\n      ''\n    ],\n    NO2UFF00: ['\\\\uff00-\\\\uffef'],\n    NO3U2E80: ['\\\\u2e80-\\\\u2eff'],\n    NO4U3000: ['\\\\u3000-\\\\u303f'],\n    NO5U31C0: ['\\\\u31c0-\\\\u31ef'],\n    NO6U2F00: ['\\\\u2f00-\\\\u2fdf'],\n    NO7U2FF0: ['\\\\u2ff0-\\u2fff'],\n    NO8U3100: ['\\\\u3100-\\\\u312f'],\n    NO9U31A0: ['\\\\u31a0-\\\\u31bf'],\n    NO10U3040: ['\\\\u3040-\\\\u309f'],\n    NO11U30A0: ['\\\\u30a0-\\\\u30ff'],\n    NO12U31F0: ['\\\\u31f0-\\\\u31ff'],\n    NO13UAC00: ['\\\\uac00-\\\\ud7af'],\n    NO14U1100: ['\\\\u1100-\\\\u11ff'],\n    NO15U3130: ['\\\\u3130-\\\\u318f'],\n    NO16U1D300: [''], // \\\\u1d300-\\\\u1d35f\n    NO17U4DC0: ['\\\\u4dc0-\\\\u4dff'],\n    NO18UA000: ['\\\\ua000-\\\\ua48f'],\n    NO19UA490: ['\\\\ua490-\\\\ua4cf'],\n    NO20U2800: ['\\\\u2800-\\\\u28ff'],\n    NO21U3200: ['\\\\u3200-\\\\u32ff'],\n    NO22U3300: ['\\\\u3300-\\\\u33ff'],\n    NO23U2700: ['\\\\u2700-\\\\u27bf'],\n    NO24U2600: ['\\\\u2600-\\\\u26ff'],\n    NO25UFE10: ['\\\\ufe10-\\\\ufe1f'],\n    NO26UFE30: ['\\\\ufe30-\\\\ufe4f']\n  }\n  let reg\n  let str = '['\n  for (const k in cjk) {\n    str += cjk[k].join('')\n  }\n  str += ']+'\n  if (str !== '[]+') {\n    reg = new RegExp(str, 'm')\n    return reg.test(ch)\n  }\n  return null\n}\n\nfunction getWrapString(str: string, styles: any) {\n  // 传入的str需是能被html识别的字符串，暂不支持富文本，函数返回值也是字符串\n  if (!str || str.length <= 0) return ''\n\n  const $div = document.createElement('div')\n\n  const styleObj = {\n    position: 'absolute',\n    'z-index': -1,\n    opacity: 0,\n    filter: 'alpha(opacity=0)',\n    '-ms-filter': 'alpha(opacity=0)',\n    ...styles\n  }\n\n  for (const key in styleObj) {\n    $div.style[key] = styleObj[key]\n  }\n\n  document.body.append($div)\n\n  $div.innerText = str\n\n  // 1.1获取初步处理的字符串，即已完成空白符替换，但还未计算溢出换行。\n  const rawText = $div.innerText\n\n  $div.innerText = ''\n  $div.style.overflow = 'hidden'\n  $div.style.lineHeight = '1'\n\n  const isBreakWord =\n    ($div.style.wordWrap + $div.style.wordBreak).indexOf('break') >= 0\n  const lineHeight = parseFloat($div.style.fontSize) // 记录行高判断是否产生换行\n\n  // 下面将上面初步处理的字符串进行字符分割。\n  const words = []\n  const temp = rawText.split(/\\b/) // 根据单词边界进行初次分割，分割后的non-CJK字符会变成一个整体，但CJK字符需要进行二次分割\n  // 2.对英文单词或一串中文进行二次分割\n  for (let i = 0; i < temp.length; i++) {\n    // 将包含CJK字符的项进行单字分割后存入words数字中 //另外，如果设置了break-word则将英文单词分割为单字\n    if (isCJKCharacter(temp[i]) || isBreakWord) {\n      words.push.apply(words, temp[i].split(''))\n    } else {\n      // 不包含CJK字符的项则视为一个整体直接存进words数组\n      words.push(temp[i])\n    }\n  }\n\n  // 预留用一个二维数组保存计算结果，如lines=[['12',' ','中'],['asdf','哈']]则表示结果有2行，第一行为'12 中',第二行为'asdf哈'\n  const lines = []\n  let oneline = [] // oneline是一维数组，保存一行中的单词\n  // 3.遍历求解换行位置，即尝试向行容器中添加字符。\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word === '\\n') {\n      // 如果当前单词是换行符\n      // 则将之前的内容存为1行，并追加保存一个空行\n      lines.push(oneline, [])\n      // 清空行容器\n      $div.innerText = ''\n      // 开始记录新行\n      oneline = []\n      // 结束本次循环\n      continue\n    }\n    // debugger\n    $div.innerText = $div.innerText + word // 往行容器中增加内容\n    if ($div.offsetHeight <= lineHeight) {\n      // 如果没有产生换行\n      // 将当前单词或单字追加记录到oneline中\n      oneline.push(word)\n    } else {\n      // 如果产生了换行\n      // 前面的单词存为一行\n      lines.push(oneline)\n      // 清空行容器\n      $div.innerText = ''\n      // 开始记录新行\n      oneline = []\n      // 回退，在新行中尝试添加当前单词或单字\n      i--\n    }\n  }\n\n  // 3.1矫正，手动插入最后一行。\n  lines.push(oneline)\n  // 4.收尾工作\n  // 4.1将二维数组还原为字符串\n  let string = ''\n  for (let i = 0; i < lines.length; i++) {\n    string += lines[i].join('') + '\\n'\n  }\n  string = string.substring(0, string.length - 1)\n  // 4.2移除行容器\n  $div.remove()\n  // 返回计算结果\n\n  return {\n    wrapString: string,\n    lines,\n    fontSize: lineHeight\n  }\n\n  // return string\n}\n\nexport { isCJKCharacter }\nexport default getWrapString\n","import G6 from '@antv/g6'\n// import { ellipsisString } from '../util/util'\n// import getWrapString from '../util/getWrapString'\n\nG6.registerNode(\n  'base-node',\n  {\n    options: {\n      style: {},\n      stateStyles: {\n        hover: {},\n        selected: {}\n      }\n    },\n    draw(cfg, group) {\n      // @ts-ignore\n      const { nodeType, wrapString, lines } = cfg\n      debugger\n      console.log(nodeType)\n\n      // @ts-ignore\n      const keyShape = group.addShape('rect', {\n        attrs: {\n          x: 0,\n          y: 0,\n          radius: 5,\n          lineWidth: 2,\n          fontSize: 12,\n          opacity: 1,\n          isNodeShape: true,\n          cursor: 'pointer',\n          stroke: '#fd6d5a',\n          width: 180,\n          height: 30 + (lines.length - 1) * 16\n        }\n      })\n\n      // @ts-ignore\n      group.addShape('text', {\n        attrs: {\n          textAlign: 'left',\n          textBaseline: 'top',\n          x: 8,\n          y: 8,\n          text: wrapString,\n          fontSize: 14,\n          cursor: 'pointer',\n          isNodeShape: true,\n          textColor: '#000',\n          fill: '#000'\n        }\n      })\n\n      return keyShape\n    },\n    getAnchorPoints: function getAnchorPoints() {\n      return [\n        [0, 0.5],\n        [1, 0.5]\n      ]\n    }\n  },\n  'single-node'\n)\n","import React, { useEffect, useRef } from 'react'\nimport styles from './styles.module.css'\nimport Gmind from './core/gmind'\nimport baseData from './mock/baseData'\nimport mapTree from './util/mapTree'\nimport { v4 as uuidv4 } from 'uuid'\nimport getWrapString from './util/getWrapString'\n\nimport './shape/node'\n\n// interface Props {\n//  text: string\n// }\n\nexport const Designer = () => {\n  const designerRef = useRef(null)\n  // const designerDom = designerRef.current\n\n  useEffect(() => {\n    const graph = new Gmind({\n      container: 'gmind-designer',\n      width: 1600,\n      height: 700,\n      modes: {\n        default: ['drag-canvas', 'zoom-canvas']\n      },\n      defaultNode: {\n        type: 'base-node',\n        size: [200, 100]\n      },\n      defaultEdge: {\n        type: 'cubic-horizontal',\n        style: {\n          stroke: '#A3B1BF'\n        }\n      },\n      layout: {\n        type: 'mindmap',\n        direction: 'LR', // H / V / LR / RL / TB / BT\n        // 指定节点 ID\n        // getId: function getId() {\n        //   return uuidv4()\n        // },\n        // 指定节点高度\n        getHeight: function getHeight(d: { lines: any[] }) {\n          if (d.lines.length > 0) {\n            return 40 + (d.lines.length - 1) * 16\n          }\n          return 40\n        },\n        // 指定节点宽度\n        getWidth: function getWidth() {\n          // debugger\n          return 50\n        },\n        // 指定节点之间的垂直间距\n        getVGap: function getVGap() {\n          // debugger\n          return 0\n        },\n        // 指定节点之间的水平间距\n        getHGap: function getHGap() {\n          // debugger\n          return 130\n        }\n      }\n    })\n\n    const targetData = mapTree(baseData, function (item: any) {\n      // @ts-ignore\n      // @ts-ignore\n      return {\n        ...item,\n        uuid: uuidv4(),\n        ...getWrapString(item.name, {\n          'font-size': '14px',\n          width: '160px',\n          'word-wrap': 'break-word'\n        })\n      }\n    })\n\n    console.log(targetData)\n\n    graph.data(targetData)\n    graph.render()\n    graph.fitView()\n    graph.zoomTo(1, {\n      x: 1600 / 2,\n      y: 700 / 2\n    })\n  }, [])\n  return (\n    <div\n      className={styles['gmind-designer']}\n      id='gmind-designer'\n      ref={designerRef}\n    />\n  )\n}\n","import React from 'react'\nimport './App.css'\n\nimport { Designer } from 'gmind'\nimport 'gmind/dist/index.css'\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"container\">\n        <Designer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}